{% comment %}
  INGREDIENTS PAGE (Dawn compatible)
{% endcomment %}

<section class="section page_content ingredients_content" data-section-id="{{ section.id }}">
  <div class="page-width ingredient_content">

    <div class="ingredint__buttons slideshow-classic__buttons" role="tablist" aria-label="Ingredient categories">
      <a href="#supplements_blog_{{ section.id }}" class="button button--primary active" role="tab"
         aria-selected="true" aria-controls="supplements_blog_{{ section.id }}">Supplement</a>
      <a href="#skincare_blog_{{ section.id }}" class="button button--primary" role="tab"
         aria-selected="false" aria-controls="skincare_blog_{{ section.id }}">Skincare</a>
    </div>

    {%- render 'filter', filter_letters: true, filter_for: 'ingredients' -%}
  </div>

  <ul class="tabs-content" style="list-style:none; padding-left:0; margin:0;">
    <li class="tab-panel active" id="supplements_blog_{{ section.id }}" role="tabpanel" aria-labelledby="supplement-tab-{{ section.id }}">
      <div class="page-width max-width-container">
        {%- if section.settings.supplement_intro != blank -%}
          <section class="text__layout ingredient__container rte">
            {{ section.settings.supplement_intro }}
          </section>
        {%- endif -%}

        {%- assign blog = blogs[section.settings.blog_category] -%}
        {%- if blog and blog.articles_count > 0 -%}
          {%- paginate blog.articles by 500 -%}
            {%- render 'ingredient-cards', articles: paginate.items, blog: blog -%}
          {%- endpaginate -%}
        {%- else -%}
          <p class="color-foreground-50">No supplement ingredients found.</p>
        {%- endif -%}
      </div>
    </li>

    <li class="tab-panel" id="skincare_blog_{{ section.id }}" role="tabpanel" aria-labelledby="skincare-tab-{{ section.id }}" hidden>
      <div class="page-width max-width-container">
        {%- if section.settings.skincare_intro != blank -%}
          <section class="text__layout ingredient__container rte">
            {{ section.settings.skincare_intro }}
          </section>
        {%- endif -%}

        {%- assign blog = blogs[section.settings.blog_category_1] -%}
        {%- if blog and blog.articles_count > 0 -%}
          {%- paginate blog.articles by 500 -%}
            {%- render 'ingredient-cards', articles: paginate.items, blog: blog -%}
          {%- endpaginate -%}
        {%- else -%}
          <p class="color-foreground-50">No skincare ingredients found.</p>
        {%- endif -%}
      </div>
    </li>
  </ul>

  <style>
    /* Scoped to this section */
    [data-section-id="{{ section.id }}"] .image-element__wrap img { border-radius: 20px; }
    [data-section-id="{{ section.id }}"] .ingredient-card { padding-top: 15px; padding-bottom: 15px; }

    [data-section-id="{{ section.id }}"] .slideshow-classic__buttons { justify-content: flex-start; margin-top: 25px; gap: 10px; flex-wrap: wrap; }
    [data-section-id="{{ section.id }}"] .slideshow-classic__buttons .button.button--primary {
      background: #fff; color: #000; text-transform: uppercase; border: 1px solid rgb(var(--color-foreground), 0.15);
    }
    [data-section-id="{{ section.id }}"] .slideshow-classic__buttons .button.button--primary.active {
      background: #4271a9; color: #fff; border-color: #4271a9;
    }

    [data-section-id="{{ section.id }}"] .tab-panel[hidden] { display: none !important; }
  </style>

  <script>
  (function() {
    const DEBUG = true;
    const PFX = '[INGR]';
    const log  = (...a) => DEBUG && console.log(PFX, ...a);
    const warn = (...a) => DEBUG && console.warn(PFX, ...a);
    const group = (label, fn) => { if (!DEBUG) return fn(); console.groupCollapsed(PFX, label); try { fn(); } finally { console.groupEnd(); } };

    const root = document.querySelector('[data-section-id="{{ section.id }}"]');
    if (!root) { warn('Section root not found'); return; }
    log('Boot', { sectionId: '{{ section.id }}' });

    const qs  = (sel, ctx = root) => ctx.querySelector(sel);
    const qsa = (sel, ctx = root) => Array.from(ctx.querySelectorAll(sel));

    function cardUrlFromDataset(card) {
      const explicit = card.getAttribute('data-article-url');
      if (explicit) { log('cardUrlFromDataset: explicit', explicit); return explicit; }
      const blogHandle = card.getAttribute('data-blog-handle');
      const articleHandle = card.getAttribute('data-article-handle');
      if (blogHandle && articleHandle) {
        const u = `/blogs/${blogHandle}/articles/${articleHandle}`;
        log('cardUrlFromDataset: blog/article handles', u);
        return u;
      }
      const legacy = card.getAttribute('data-handle');
      if (legacy) {
        const u = `/blogs/${legacy}`;
        log('cardUrlFromDataset: legacy handle', u);
        return u;
      }
      warn('cardUrlFromDataset: no dataset for URL', card);
      return null;
    }

    async function hydrateCard(card) {
      if (card.classList.contains('hide')) { log('Skip hidden card'); return; }

      const target = qs('.js-ingredient-products', card);
      if (!target) { warn('Missing .js-ingredient-products in card', card); return; }

      const base = cardUrlFromDataset(card);
      if (!base) return;

      const url = base.includes('?') ? `${base}&view=ajax-ingredient` : `${base}?view=ajax-ingredient`;
      if (card.dataset.hydrated === 'true') { log('Already hydrated', url); return; }

      group('Hydrate card', () => {
        log('Fetching', url);
      });

      try {
        const res = await fetch(url, { credentials: 'same-origin' });
        log('Fetch status', res.status, url);
        if (!res.ok) { warn('Fetch failed', { status: res.status, url }); return; }
        const html = await res.text();
        target.innerHTML = html;
        card.dataset.hydrated = 'true';
        log('Hydrated OK', url);
      } catch (e) {
        warn('Fetch error', url, e);
      }
    }

    function buildProducts() {
      const cards = qsa('.js-ingredient-card');
      const visible = cards.filter(c => !c.classList.contains('hide') && !c.hasAttribute('hidden'));
      group('buildProducts()', () => {
        log('cards total', cards.length);
        log('cards visible', visible.length);
        if (visible.length === 0) warn('No visible cards â€” check letter filter or initial markup');
      });
      visible.forEach(hydrateCard);
    }

    function setupTabs() {
      const buttonsWrap = qs('.ingredint__buttons');
      if (!buttonsWrap) { warn('No .ingredint__buttons'); return; }

      const links = qsa('a.button', buttonsWrap);
      log('Tab links found', links.length);

      let active = links[0];
      let currentPanel = qs(active?.getAttribute('href'));
      if (currentPanel) currentPanel.removeAttribute('hidden');

      links.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          if (link === active) return;

          log('Tab switch', { from: active?.textContent?.trim(), to: link.textContent?.trim() });

          active.classList.remove('active');
          if (currentPanel) currentPanel.setAttribute('hidden', '');

          active = link;
          active.classList.add('active');
          currentPanel = qs(active.getAttribute('href'));
          if (currentPanel) currentPanel.removeAttribute('hidden');

          buildProducts();
        });
      });
    }

    function onLetterFiltered(ev) {
      log('letterFiltered event', ev?.detail);
      buildProducts();
    }

    function init() {
      log('init()');
      setupTabs();
      buildProducts();
      document.addEventListener('letterFiltered', onLetterFiltered);
    }

    function destroy() {
      log('destroy()');
      document.removeEventListener('letterFiltered', onLetterFiltered);
    }

    // Expose helpers for manual debugging in console
    window.INGR = Object.assign(window.INGR || {}, {
      rebuild: buildProducts,
      setDebug: (v) => (window.INGR_DEBUG = v),
    });

    init();

    document.addEventListener('shopify:section:load', (evt) => { if (evt.detail.sectionId === '{{ section.id }}') { destroy(); init(); } });
    document.addEventListener('shopify:section:select', (evt) => { if (evt.detail.sectionId === '{{ section.id }}') { destroy(); init(); } });
    document.addEventListener('shopify:section:deselect', (evt) => { if (evt.detail.sectionId === '{{ section.id }}') { destroy(); init(); } });
  })();
</script>

</section>

{% schema %}
{
  "name": "Ingredients Page",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "richtext",
      "id": "supplement_intro",
      "label": "Supplement intro",
      "default": "<p>Intro copy for Supplement ingredients.</p>"
    },
    {
      "type": "blog",
      "id": "blog_category",
      "label": "Supplement blog"
    },
    {
      "type": "richtext",
      "id": "skincare_intro",
      "label": "Skincare intro",
      "default": "<p>Intro copy for Skincare ingredients.</p>"
    },
    {
      "type": "blog",
      "id": "blog_category_1",
      "label": "Skincare blog"
    }
  ],
  "presets": [
    { "name": "Ingredients Page" }
  ]
}
{% endschema %}
