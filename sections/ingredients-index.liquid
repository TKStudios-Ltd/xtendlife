{% comment %}
  INGREDIENTS INDEX (Dawn)
  - Two blogs (supplements / skincare) chosen in settings
  - Per-tab Aâ€“Z filter; defaults to "A" with fallback if empty
  - Fully self-contained (no snippets required)
{% endcomment %}

<section class="ingredients-index" data-section-id="{{ section.id }}">
  <div class="page-width">

    <!-- Tabs -->
    <div class="flex items-center gap-6 mb-6">
      <button class="tab-btn text-lg font-medium active" data-tab="supplements-{{ section.id }}">Supplements</button>
      <button class="tab-btn text-lg font-medium opacity-60 hover:opacity-100" data-tab="skincare-{{ section.id }}">Skincare</button>
    </div>
    <hr class="mb-8" />

    <!-- Tab: Supplements -->
    <div class="tab-panel" id="supplements-{{ section.id }}">
      {% assign supp_blog = blogs[section.settings.supp_blog] %}
      {% if section.settings.supp_intro != blank %}
        <div class="rte mb-6">{{ section.settings.supp_intro }}</div>
      {% endif %}

      <!-- Letters -->
      <ul class="letters mb-6" role="tablist" aria-label="Filter by letter">
        <li><button class="letter active" data-letter="A">A</button></li>
        {% assign letters = 'B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z' | split: '|' %}
        {% for l in letters %}
          <li><button class="letter" data-letter="{{ l }}">{{ l }}</button></li>
        {% endfor %}
        <li><button class="letter" data-letter="0-9">0-9</button></li>
      </ul>

      {% if supp_blog %}
        {% paginate supp_blog.articles by 500 %}
          <div class="ingredients-list" data-list-for="supplements">
            {% assign articles_sorted = paginate.items | sort: 'title' %}
            {% for article in articles_sorted %}
              {% if article.handle != blank %}
                {% assign first = article.title | slice: 0, 1 | upcase %}
                {% if first contains '0' or first contains '1' or first contains '2' or first contains '3' or first contains '4' or first contains '5' or first contains '6' or first contains '7' or first contains '8' or first contains '9' or first == '' %}
                  {% assign first = '0-9' %}
                {% endif %}
                <article class="ingredient-row" data-letter="{{ first }}">
                  <a class="ingredient-link" href="{{ article.url }}">{{ article.title }}</a>
                  {% if section.settings.show_excerpt and article.excerpt != blank %}
                    <div class="ingredient-excerpt">{{ article.excerpt | strip_html }}</div>
                  {% endif %}
                </article>
              {% endif %}
            {% endfor %}
          </div>
        {% endpaginate %}
      {% else %}
        <p>No blog selected for Supplements.</p>
      {% endif %}
    </div>

    <!-- Tab: Skincare -->
    <div class="tab-panel hidden" id="skincare-{{ section.id }}">
      {% assign skin_blog = blogs[section.settings.skin_blog] %}
      {% if section.settings.skin_intro != blank %}
        <div class="rte mb-6">{{ section.settings.skin_intro }}</div>
      {% endif %}

      <!-- Letters -->
      <ul class="letters mb-6" role="tablist" aria-label="Filter by letter">
        <li><button class="letter active" data-letter="A">A</button></li>
        {% for l in letters %}
          <li><button class="letter" data-letter="{{ l }}">{{ l }}</button></li>
        {% endfor %}
        <li><button class="letter" data-letter="0-9">0-9</button></li>
      </ul>

      {% if skin_blog %}
        {% paginate skin_blog.articles by 500 %}
          <div class="ingredients-list" data-list-for="skincare">
            {% assign articles_sorted = paginate.items | sort: 'title' %}
            {% for article in articles_sorted %}
              {% if article.handle != blank %}
                {% assign first = article.title | slice: 0, 1 | upcase %}
                {% if first contains '0' or first contains '1' or first contains '2' or first contains '3' or first contains '4' or first contains '5' or first contains '6' or first contains '7' or first contains '8' or first contains '9' or first == '' %}
                  {% assign first = '0-9' %}
                {% endif %}
                <article class="ingredient-row" data-letter="{{ first }}">
                  <a class="ingredient-link" href="{{ article.url }}">{{ article.title }}</a>
                  {% if section.settings.show_excerpt and article.excerpt != blank %}
                    <div class="ingredient-excerpt">{{ article.excerpt | strip_html }}</div>
                  {% endif %}
                </article>
              {% endif %}
            {% endfor %}
          </div>
        {% endpaginate %}
      {% else %}
        <p>No blog selected for Skincare.</p>
      {% endif %}
    </div>
  </div>

  <style>
    /* Scoped to this section */
    [data-section-id="{{ section.id }}"] .tab-btn { border: none; background: none; cursor: pointer; }
    [data-section-id="{{ section.id }}"] .tab-btn.active { color: rgb(var(--color-foreground)); font-weight: 600; }
    [data-section-id="{{ section.id }}"] .hidden { display: none !important; }

    [data-section-id="{{ section.id }}"] .letters { display:flex; gap:12px; flex-wrap:wrap; align-items:center; }
    [data-section-id="{{ section.id }}"] .letters li { list-style:none; }
    [data-section-id="{{ section.id }}"] .letter { border:none; background:none; cursor:pointer; opacity:.6; }
    [data-section-id="{{ section.id }}"] .letter.active { text-decoration:underline; opacity:1; }

    [data-section-id="{{ section.id }}"] .ingredients-list { display:grid; gap:16px; }
    [data-section-id="{{ section.id }}"] .ingredient-row { padding:10px 0; border-bottom:1px solid rgba(0,0,0,.08); }
    [data-section-id="{{ section.id }}"] .ingredient-link { font-weight:600; }
    [data-section-id="{{ section.id }}"] .ingredient-excerpt { margin-top:4px; opacity:.8; }
  </style>

  <script>
    (function(){
      const root = document.querySelector('[data-section-id="{{ section.id }}"]');
      if(!root) return;

      // Tabs
      const tabs = Array.from(root.querySelectorAll('.tab-btn'));
      const panels = {
        [tabs[0]?.dataset.tab]: root.querySelector('#' + (tabs[0]?.dataset.tab || '')),
        [tabs[1]?.dataset.tab]: root.querySelector('#' + (tabs[1]?.dataset.tab || '')),
      };

      function showTab(id){
        tabs.forEach(b => b.classList.toggle('active', b.dataset.tab === id));
        Object.keys(panels).forEach(k => panels[k]?.classList.toggle('hidden', k !== id));
        // When switching tabs, re-apply current (or default) letter filter
        const panel = panels[id];
        const activeLetterBtn = panel?.querySelector('.letters .letter.active') || panel?.querySelector('.letters .letter[data-letter="A"]');
        if (activeLetterBtn) applyLetter(panel, activeLetterBtn.dataset.letter, true);
      }

      tabs.forEach(btn => btn.addEventListener('click', (e) => {
        e.preventDefault();
        showTab(btn.dataset.tab);
      }));

      // Letters
      function applyLetter(panel, letter, allowFallback){
        // update active
        panel.querySelectorAll('.letters .letter').forEach(b=>{
          b.classList.toggle('active', b.dataset.letter === letter);
        });

        const rows = Array.from(panel.querySelectorAll('.ingredients-list .ingredient-row'));
        let visible = 0;
        rows.forEach(r => {
          const show = (r.getAttribute('data-letter') || '').toUpperCase() === letter.toUpperCase();
          r.style.display = show ? '' : 'none';
          if (show) visible++;
        });

        // Fallback to first letter that has items
        if (allowFallback && visible === 0) {
          // build counts
          const counts = new Map();
          rows.forEach(r => {
            const L = (r.getAttribute('data-letter') || '').toUpperCase();
            counts.set(L, (counts.get(L) || 0) + 1);
          });
          const ordered = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0-9'];
          const fallback = ordered.find(L => counts.get(L) > 0);
          if (fallback) {
            const fbBtn = panel.querySelector(`.letters .letter[data-letter="${fallback}"]`);
            panel.querySelectorAll('.letters .letter').forEach(b=>b.classList.toggle('active', b.dataset.letter === fallback));
            rows.forEach(r => {
              const show = (r.getAttribute('data-letter') || '').toUpperCase() === fallback;
              r.style.display = show ? '' : 'none';
            });
          }
        }
      }

      root.addEventListener('click', (e) => {
        const btn = e.target.closest('.letters .letter');
        if (!btn) return;
        const panel = e.target.closest('.tab-panel');
        if (!panel) return;
        e.preventDefault();
        applyLetter(panel, btn.dataset.letter, false);
      });

      // Boot: default to Supplements + letter A (with fallback)
      showTab(tabs[0]?.dataset.tab);
    })();
  </script>
</section>

{% schema %}
{
  "name": "Ingredients index",
  "settings": [
    { "type": "blog", "id": "supp_blog", "label": "Supplements blog" },
    { "type": "richtext", "id": "supp_intro", "label": "Supplements intro" },
    { "type": "blog", "id": "skin_blog", "label": "Skincare blog" },
    { "type": "richtext", "id": "skin_intro", "label": "Skincare intro" },
    { "type": "checkbox", "id": "show_excerpt", "label": "Show article excerpts", "default": false }
  ],
  "presets": [{ "name": "Ingredients index" }]
}
{% endschema %}
