{% comment %}
  Product Tabs â†’ Mobile Accordion (Dawn)
  Desktop tabs / Mobile accordion
  Bonify Custom Fields namespace: custom_fields
  Metafields pulled:
    - Details col1: product.custom_fields.[product_details/product_description] (fallback to product.description)
    - Ingredients col2: product.custom_fields.product_ingredients
    - Directions & Dosage col1: product.custom_fields.product_directions
  Schema:
    - Details col2 image
    - Ingredients col1 rich text
    - Directions col2 image
    - Shipping col1 rich text
    - Shipping col2 rich text
{% endcomment %}

<section class="product-tabs-accordion product-tabs-accordion--{{ section.id }}" data-section-id="{{ section.id }}" data-section-type="product-tabs-accordion">
  <div class="page-width">
    {%- if product -%}
      {%- comment -%} Gather content (Bonify uses custom_fields namespace) {%- endcomment -%}
      {%- assign details_meta = product.metafields.custom_fields['product_details'] -%}
      {%- if details_meta == blank -%}{% assign details_meta = product.metafields.custom_fields['product_description'] %}{%- endif -%}
      {%- if details_meta == blank -%}{% assign details_meta = product.description %}{%- endif -%}

      {%- assign ingredients_meta = product.metafields.custom_fields['product_ingredients'] -%}
      {%- assign directions_meta  = product.metafields.custom_fields['product_directions'] -%}

      {%- assign details_image = section.settings.details_image -%}
      {%- assign ingredients_text = section.settings.ingredients_text -%}
      {%- assign directions_image = section.settings.directions_image -%}
      {%- assign shipping_col1 = section.settings.shipping_col1 -%}
      {%- assign shipping_col2 = section.settings.shipping_col2 -%}

      {%- comment -%} Ensure headers always show {%- endcomment -%}
      {%- assign tabs_array = 'details,ingredients,directions,shipping' | split: ',' -%}

      <div class="pta__tabs-nav" role="tablist" aria-label="Product information tabs">
        <ul class="pta__tabs-nav-list">
          {%- for key in tabs_array -%}
            {%- assign is_active = forloop.first -%}
            <li>
              <button
                class="pta__tab-btn{% if is_active %} is-active{% endif %}"
                role="tab"
                aria-selected="{% if is_active %}true{% else %}false{% endif %}"
                aria-controls="pta-panel-{{ key }}-{{ section.id }}"
                id="pta-tab-{{ key }}-{{ section.id }}"
                data-tab-target="pta-panel-{{ key }}-{{ section.id }}">
                {%- case key -%}
                  {%- when 'details' -%}{{ section.settings.label_details }}
                  {%- when 'ingredients' -%}{{ section.settings.label_ingredients }}
                  {%- when 'directions' -%}{{ section.settings.label_directions }}
                  {%- when 'shipping' -%}{{ section.settings.label_shipping }}
                {%- endcase -%}
              </button>
            </li>
          {%- endfor -%}
        </ul>
      </div>

      <div class="pta__panels">
        {%- for key in tabs_array -%}
          {%- assign is_active = forloop.first -%}
          <div
            id="pta-panel-{{ key }}-{{ section.id }}"
            class="pta__panel{% if is_active %} is-active{% endif %}"
            role="tabpanel"
            aria-labelledby="pta-tab-{{ key }}-{{ section.id }}">

            <button class="pta__accordion-trigger" aria-expanded="{% if is_active %}true{% else %}false{% endif %}" aria-controls="pta-acc-content-{{ key }}-{{ section.id }}">
                <span class="pta__accordion-title">
                    {%- case key -%}
                    {%- when 'details' -%}{{ section.settings.label_details }}
                    {%- when 'ingredients' -%}{{ section.settings.label_ingredients }}
                    {%- when 'directions' -%}{{ section.settings.label_directions }}
                    {%- when 'shipping' -%}{{ section.settings.label_shipping }}
                    {%- endcase -%}
                </span>
                <span class="pta__accordion-icon" aria-hidden="true">
                    <span class="svg-wrapper">
                        {{- 'icon-plus.svg' | inline_asset_content -}}
                    </span>
                </span>
            </button>

            <div class="pta__accordion-content" id="pta-acc-content-{{ key }}-{{ section.id }}">
              <div class="pta__content pta__content--twocol">
                {%- case key -%}

                  {%- when 'details' -%}
                    <div class="pta__col">
                      {{ details_meta }}
                    </div>
                    <div class="pta__col">
                      {%- if details_image != blank -%}
                        {{ details_image | image_url: width: 1200 | image_tag: loading: 'lazy', alt: product.title }}
                      {%- endif -%}
                    </div>

                  {%- when 'ingredients' -%}
                    <div class="pta__col">
                      {%- if ingredients_text != blank -%}
                        {{ ingredients_text }}
                      {%- endif -%}
                    </div>
                    <div class="pta__col">
                      {{ ingredients_meta }}
                    </div>

                  {%- when 'directions' -%}
                    <div class="pta__col">
                      {{ directions_meta }}
                    </div>
                    <div class="pta__col">
                      {%- if directions_image != blank -%}
                        {{ directions_image | image_url: width: 1200 | image_tag: loading: 'lazy', alt: product.title }}
                      {%- endif -%}
                    </div>

                  {%- when 'shipping' -%}
                    <div class="pta__col">
                      {{ shipping_col1 }}
                    </div>
                    <div class="pta__col">
                      {{ shipping_col2 }}
                    </div>

                {%- endcase -%}
              </div>
            </div>
          </div>
        {%- endfor -%}
      </div>
    {%- else -%}
      <div class="color-subtext" style="padding:1rem 0"><em>This section must be used on a product template.</em></div>
    {%- endif -%}
  </div>
</section>

{%- style -%}
    .product-tabs-accordion { margin-top: 2rem; }
    .pta__tabs-nav { 
        display: none; 
        border-bottom: 2px solid rgba(31, 25, 70, 0.16); 
        margin-bottom: 3rem; 
    }
    .pta__tabs-nav-list { 
        display: flex; 
        gap: 1rem; 
        list-style: none; 
        padding: 0; 
        margin: 0; 
        flex-wrap: wrap; 
    }
    .pta__tabs-nav-list li {
        flex: 0 0 calc(25% - 1rem);
    }
    .pta__tab-btn {
        position: relative; 
        font-family: var(--font-body-family);
        font-size: 24px;
        font-weight: 400;
        color: rgba(var(--color-foreground), 1);
        padding: 0.5rem 0;
        width: 100%;
        text-align: left;
        margin-bottom: -2px;
        background: none; 
        border: none; 
        cursor: pointer; 
        border-bottom: 2px solid transparent;
    }
    .pta__tab-btn.is-active { border-color: currentColor; font-weight: 500; }
    .pta__panel { border-top: 2px solid rgba(31, 25, 70, 1); }
    .pta__panel.is-active:first-child { border-top: none; }
    .pta__accordion-trigger {
        width: 100%; text-align: left; background: none; border-top: 1px solid rgba(31, 25, 70, 1) !important; border: none; padding: 1rem 0; font: inherit;
        display: flex; align-items: center; justify-content: space-between; cursor: pointer;
    }
    .pta__accordion-icon { transition: transform 200ms ease; }
    .pta__panel.is-active .pta__accordion-trigger[aria-expanded="true"] .pta__accordion-icon { transform: rotate(45deg); }
    .pta__accordion-content { overflow: hidden; max-height: 0; transition: max-height 250ms ease; }
    .pta__content { line-height: 1.6; }
    .pta__content--twocol { display: flex; gap: 2rem; }
    .pta__content--twocol .pta__col { flex: 0 0 100%; }
    .pta__content--twocol .pta__col img { width: 100%; height: auto; }
    .pta__content--twocol .pta__col strong { font-weight: 500; }
    .pta__content--twocol .pta__col a { color: rgba(31, 25, 70, 1); }
    .pta__content--twocol .pta__col > *:first-child { margin-top: 0; }
    .pta__content--twocol .pta__col .ingredient-table {
        margin: 0;
        width: 100%;
        border: 1px solid;
        border-radius: 10px;
    }
    .pta__content--twocol .pta__col .ingredient-table .header {
        padding: 0 1.5rem;
        border-radius: 0;
        background: transparent;
        box-shadow: none;
    }
    .pta__content--twocol .pta__col .ingredient-table .header td { padding: 0; }
    .pta__content--twocol .pta__col .ingredient-table .header h2 { margin: 1.5rem 0; }
    .pta__content--twocol .pta__col .ingredient-table .header strong { font-weight: 500; }
    .pta__content--twocol .pta__col .ingredient-table .content td { padding: 0 1.5rem; }
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) { box-shadow: none; width: 100%;}
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) td, 
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) th { padding: 0.5em 1.5rem !important; color: rgba(31, 25, 70, 1); }
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) td strong, 
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) th strong { font-weight: 500; }
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) .column-header { background: #f4f8fb; }
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) td a, 
    .pta__content--twocol .pta__col .ingredient-table .content table:not([class]) th a { color: #5fc4ff; }
    .pta__content--twocol .pta__col .ingredient-table .footer { display: block; padding-bottom: 2rem; }
    .pta__content--twocol .pta__col .ingredient-table .footer td { padding: 0 1.5rem; }
    @media (max-width: 989px) {
        .pta__panels { border-bottom: 1px solid rgba(31, 25, 70, 1); margin-bottom: 4rem; }
        .pta__accordion-title { font-family: var(--font-heading-family); font-size: 20px; font-weight: 500; color: rgb(var(--color-foreground)); }
        .pta__accordion-icon { display: flex; }
        .pta__accordion-icon .svg-wrapper { width: 16px; height: 16px; }
        .pta__accordion-icon .svg-wrapper path { fill: rgba(31, 25, 70, 1); }
    }
    @media (min-width: 990px) {
        .pta__tabs-nav { display: block; }
        .pta__accordion-trigger { display: none; }
        .pta__accordion-content { max-height: none !important; overflow: visible; }
        .pta__panels > .pta__panel { display: none; padding: 2rem 0 4rem; border-top: none; }
        .pta__panels > .pta__panel.is-active { display: block; }
        .pta__content--twocol { gap: 6rem; }
        .pta__content--twocol > * { break-inside: avoid; }
        .pta__content--twocol .pta__col { flex: 0 0 calc(50% - 3rem); }
        .pta__content--twocol .pta__col > *:first-child { padding-right: 2rem; }
        .pta__content--twocol .pta__col p { font-size: 20px; line-height: 1.35; }
        .pta__content--twocol .pta__col h3 { font-size: 24px; }
        #pta-acc-content-ingredients-template--17170117558359__product_tabs_accordion_YzW3EK .pta__col p { font-size: 24px; line-height: 1.2; }
    }

  :root { --color-border: rgba(0,0,0,.08); }
{%- endstyle -%}

<script>
  (function() {
    const section = document.querySelector('.product-tabs-accordion--{{ section.id }}');
    if (!section) return;

    const nav = section.querySelector('.pta__tabs-nav');
    const tabButtons = section.querySelectorAll('.pta__tab-btn');
    const panels = section.querySelectorAll('.pta__panel');

    function activateTab(targetId) {
      panels.forEach(p => {
        const isTarget = p.id === targetId;
        p.classList.toggle('is-active', isTarget);
        if (isTarget) { p.removeAttribute('hidden'); }
        else { p.setAttribute('hidden', 'hidden'); }
      });
      tabButtons.forEach(btn => {
        const selected = btn.getAttribute('data-tab-target') === targetId;
        btn.classList.toggle('is-active', selected);
        btn.setAttribute('aria-selected', selected ? 'true' : 'false');
      });
      const activePanel = section.querySelector('#' + targetId);
      if (activePanel) {
        const acc = activePanel.querySelector('.pta__accordion-content');
        if (acc) acc.dataset.open = 'true';
      }
    }

    tabButtons.forEach(btn => {
      btn.addEventListener('click', () => activateTab(btn.getAttribute('data-tab-target')));
    });

    const accordionTriggers = section.querySelectorAll('.pta__accordion-trigger');
    accordionTriggers.forEach(trigger => {
      const panel = trigger.closest('.pta__panel');
      const content = panel.querySelector('.pta__accordion-content');

      function setOpen(el, open) {
        if (open) { el.dataset.open = 'true'; el.style.maxHeight = el.scrollHeight + 'px'; }
        else { el.dataset.open = 'false'; el.style.maxHeight = '0px'; }
      }

      if (panel.classList.contains('is-active')) { setOpen(content, true); trigger.setAttribute('aria-expanded', 'true'); }
      else { setOpen(content, false); trigger.setAttribute('aria-expanded', 'false'); }

      trigger.addEventListener('click', () => {
        const isOpen = trigger.getAttribute('aria-expanded') === 'true';
        section.querySelectorAll('.pta__panel').forEach(p => {
          const t = p.querySelector('.pta__accordion-trigger');
          const c = p.querySelector('.pta__accordion-content');
          if (t && c) { t.setAttribute('aria-expanded', 'false'); setOpen(c, false); p.classList.remove('is-active'); }
        });
        if (!isOpen) {
          trigger.setAttribute('aria-expanded', 'true');
          setOpen(content, true);
          panel.classList.add('is-active');
        }
      });

      const ro = new ResizeObserver(() => {
        if (content.dataset.open === 'true') content.style.maxHeight = content.scrollHeight + 'px';
      });
      ro.observe(content);
    });

    if (!nav) {
      panels.forEach((p, i) => p.classList.toggle('is-active', i === 0));
    }
  })();
</script>

{% schema %}
{
  "name": "Product Tabs",
  "tag": "section",
  "class": "section product-tabs",
  "settings": [
    { "type": "text", "id": "label_details", "label": "Details tab label", "default": "Details" },
    { "type": "image_picker", "id": "details_image", "label": "Details â€“ Column 2 image" },

    { "type": "text", "id": "label_ingredients", "label": "Ingredients tab label", "default": "Ingredients" },
    { "type": "richtext", "id": "ingredients_text", "label": "Ingredients â€“ Column 1 text" },

    { "type": "text", "id": "label_directions", "label": "Directions & Dosage tab label", "default": "Directions & Dosage" },
    { "type": "image_picker", "id": "directions_image", "label": "Directions & Dosage â€“ Column 2 image" },

    { "type": "text", "id": "label_shipping", "label": "Shipping & Returns tab label", "default": "Shipping & Returns" },
    { "type": "richtext", "id": "shipping_col1", "label": "Shipping & Returns â€“ Column 1" },
    { "type": "richtext", "id": "shipping_col2", "label": "Shipping & Returns â€“ Column 2" }
  ],
  "blocks": [],
  "presets": [{ "name": "Product Tabs" }]
}
{% endschema %}
